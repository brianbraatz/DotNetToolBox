using System.Collections.Generic;

namespace ObjectExporter.Core.Globals
{
    //TODO: add Visual Basic
    public static class ReservedWords
    {
        //Note: No need to put this in a modifiable file, these words will rarely change.
        public static readonly List<string> CSharp = new List<string>()
        {
            "abstract",
            "break",
            "char",
            "continue",
            "do",
            "event",
            "finally",
            "foreach",
            "internal",
            "namespace",
            "operator",
            "params",
            "readonly",
            "sealed",
            "static",
            "this",
            "typeof",
            "unsafe",
            "void",
            "as",
            "byte",
            "checked",
            "decimal",
            "double",
            "explicit",
            "fixed",
            "goto",
            "in",
            "is",
            "new",
            "out",
            "private",
            "ref",
            "short",
            "string",
            "throw",
            "uint",
            "ushort",
            "volatile",
            "base",
            "case",
            "class",
            "default",
            "else",
            "extern",
            "float",
            "if",
            "int",
            "lock",
            "null",
            "protected",
            "return",
            "sizeof",
            "struct",
            "true",
            "ulong",
            "using",
            "while",
            "bool",
            "catch",
            "const",
            "delegate",
            "enum",
            "false",
            "for",
            "implicit",
            "interface",
            "long",
            "object",
            "override",
            "public",
            "sbyte",
            "stackalloc",
            "switch",
            "try",
            "unchecked",
            "virtual"
        };

        //TODO: add future keywords
        public static readonly List<string> FSharp = new List<string>()
        {
            "abstract",
            "and",
            "as",
            "assert",
            "base",
            "begin",
            "class",
            "default",
            "delegate",
            "do",
            "done",
            "downcast",
            "downto",
            "elif",
            "else",
            "end",
            "exception",
            "extern",
            "FALSE",
            "finally",
            "for",
            "fun",
            "function",
            "global",
            "if",
            "in",
            "inherit",
            "inline",
            "interface",
            "internal",
            "lazy",
            "let",
            "let!",
            "match",
            "member",
            "module",
            "mutable",
            "namespace",
            "new",
            "not",
            "null",
            "of",
            "open",
            "or",
            "override",
            "private",
            "public",
            "rec",
            "return",
            "return!",
            "select",
            "static",
            "struct",
            "then",
            "to",
            "TRUE",
            "try",
            "type",
            "upcast",
            "use",
            "use!",
            "val",
            "void",
            "when",
            "while",
            "with",
            "yield",
            "yield!"
        };
    }
}
