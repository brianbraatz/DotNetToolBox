<#@ template language="C#" #>
<#@ parameter name="objectExpression" type="EnvDTE.Expression" #>
<#@ parameter name="maxDepth" type="System.Int32" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<?xml version="1.0" encoding="utf-8"?>
<# ExportMembers(objectExpression, 0); #>
<#+
    bool isFirstElement = true;

    public void ExportMembers(Expression expression, int currentDepth)
    {
        string expressionType;
        if(isFirstElement) //TODO: can probably replace isFirstElement with currentDepth = 0
        {
            //Frameworks can add theType { dynamicType} - strip out the {dynamic type}
            expressionType = GeneratorHelper.GetBaseClassFromType(expression.Type);
        }
        else
        {
            //members of objects have a type of: object { theType } - strip out object { }
            expressionType = GeneratorHelper.GetSubClassFromType(expression.Type);
        }

        if(!GeneratorHelper.IsSerializable(expression.Name))
        {
            return;
        }
        else if(expression.Value == "null")
        {
            return;
        }
        else if(GeneratorHelper.CanBeExpressedAsSingleType(expressionType))
        {
            WriteLine("");
            if(GeneratorHelper.IsCollectionMember(expression.Name))
            {
                #><<#= expressionType #>><#= GetSingleTypeValue(expression) #></<#= expressionType #>><#+
            }
            else
            {
                #><<#= expression.Name #>><#= GetSingleTypeValue(expression) #></<#= expression.Name #>><#+
            }
        }
        else if (expression.DataMembers.Count == 0)
        {
            WriteLine("");
            string node = expression.Name;
            if(GeneratorHelper.IsCollectionMember(expression.Name))
            {
                node = expressionType;
            }

            #><<#= node #>><#= expression.Value #></<#= node #>><#+
        }
        else if (expression.DataMembers.Count > 0 && currentDepth <= maxDepth)
        {
            //used for the very first object (top most) to be completed as var objName = new objType, without a space in between.
            if(isFirstElement)
            {
                isFirstElement = false;
            }
            else
            {
                WriteLine("");
            }

            string node = expressionType;
            if(GeneratorHelper.IsTypeOfCollection(expressionType) && !GeneratorHelper.IsCollectionMember(expression.Name))
            {
                node = expression.Name;
            }

            List<Expression> cleanedExpressionMembers = GeneratorHelper.SanitizeExpressions(expression, _ruleSetValidator, expressionType);
        
            #><<#= node #>><#+
            foreach(Expression exp in cleanedExpressionMembers)
            {
                PushIndent("\t");
                ExportMembers(exp, currentDepth + 1);
                PopIndent();
            }
            WriteLine("");
            #></<#= node #>><#+
        }
    }
#>